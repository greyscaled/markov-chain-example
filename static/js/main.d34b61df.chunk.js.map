{"version":3,"sources":["components/GameGrid.tsx","components/Header.tsx","components/Layout.tsx","entities/game.ts","App.tsx","index.tsx"],"names":["styles","stylesheet","tableCell","border","padding","tableCellSelected","backgroundColor","color","tableCellContent","alignItems","display","flexDirection","tableCellContentValue","fontWeight","tableCellContentProbability","marginTop","TABLE_DATA","GameGrid","game","probabilityString","val","pVector","probabilityMatrix","current","toFixed","map","row","idx","className","value","classes","Header","href","rel","target","root","Layout","children","p3","p5","p8","GAME_PROBABILITIES","Game","MarkovChain","Array","from","App","useState","setSelectedValue","useEffect","interval","window","setInterval","next","clearInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAQMA,EAASC,YAAW,CACxBC,UAAW,CACTC,OAAQ,iBACRC,QAAS,IAEXC,kBAAmB,CACjBC,gBAAiB,SACjBC,MAAO,QAETC,iBAAkB,CAChBC,WAAY,SACZC,QAAS,OACTC,cAAe,UAEjBC,sBAAuB,CACrBC,WAAY,QAEdC,4BAA6B,CAC3BC,UAAW,SAITC,EAAa,CACjB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGIC,EAAoC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAQ5CC,EAAoB,SAACC,GACzB,IAAMC,EAAUH,EAAKI,kBAAkBJ,EAAKK,SAE5C,MAAM,KAAN,OAAYF,EAAQD,GAAKI,QADH,KAIxB,OACE,gCACGR,EAAWS,KAAI,SAACC,EAAKC,GAAN,OACd,6BACGD,EAAID,KAAI,SAACL,GAAD,OACP,oBAAIQ,WAlBKC,EAkBgBT,EAjB7BS,IAAUX,EAAKK,QACVO,YAAQ9B,EAAOE,UAAWF,EAAOK,mBAEnCL,EAAOE,WAcN,SACE,sBAAK0B,UAAW5B,EAAOQ,iBAAvB,UACE,qBAAKoB,UAAW5B,EAAOY,sBAAvB,SAA+CQ,IAC/C,sBAAMQ,UAAW5B,EAAOc,4BAAxB,SAAsDK,EAAkBC,SAHxCA,GAlB5B,IAACS,MAgBJF,SCnDJI,EAAmB,kBAC9B,+BACE,mBAAGC,KAAK,6CAA6CC,IAAI,sBAAsBC,OAAO,SAAtF,sCAEK,IAHP,cCAIlC,EAASC,YAAW,CACxBkC,KAAM,CACJ1B,WAAY,SACZC,QAAS,OACTC,cAAe,YAINyB,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,qBAAKT,UAAW5B,EAAOmC,KAAvB,SAA8BE,KCL1EC,EAAK,EAAI,EACTC,EAAK,GACLC,EAAK,EAAI,EAETC,EAAqB,CACzB,CANS,EAMJH,EANI,EAMIA,EAAIA,EANR,SAOT,CAACC,EAPQ,EAOAA,EAAIA,EAAIA,EAAIA,EAPZ,OAQT,CARS,EAQJD,EARI,IAQQA,EAAIA,EARZ,OAUT,CAACC,EAAIA,EAVI,IAUQA,EAVR,EAUgBA,EAAIA,EAVpB,GAWT,CAACC,EAAIA,EAAIA,EAAIA,EAXJ,EAWYA,EAAIA,EAAIA,EAAIA,GACjC,CAZS,EAYJD,EAAIA,EAZA,EAYQA,EAZR,IAYoBA,EAAIA,GAEjC,CAdS,MAcID,EAAIA,EAdR,IAcoBA,EAdpB,GAeT,CAfS,MAeIC,EAAIA,EAAIA,EAAIA,EAfhB,EAewBA,GACjC,CAhBS,QAgBQD,EAAIA,EAhBZ,EAgBoBA,EAhBpB,IAmBEI,EAAO,I,MAAIC,aAAYC,MAAMC,KAtBtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAsBgBJ,GClBhDK,EAAgB,WAC3B,MAA6BC,mBAAqBL,EAAKnB,SAA9CyB,EAAT,oBAQA,OANAC,qBAAU,WACR,IACMC,EAAWC,OAAOC,aADA,kBAAMJ,EAAiBN,EAAKW,UACC,KACrD,OAAO,kBAAMF,OAAOG,cAAcJ,MACjC,IAGD,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAUhC,KAAMwB,QCdtBa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d34b61df.chunk.js","sourcesContent":["import React from \"react\";\nimport { classes, stylesheet } from \"typestyle\";\nimport { Game } from \"../entities/game\";\n\ninterface GameGridProps {\n  game: typeof Game;\n}\n\nconst styles = stylesheet({\n  tableCell: {\n    border: \"1px solid #000\",\n    padding: 32,\n  },\n  tableCellSelected: {\n    backgroundColor: \"purple\",\n    color: \"#fff\",\n  },\n  tableCellContent: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  tableCellContentValue: {\n    fontWeight: \"bold\",\n  },\n  tableCellContentProbability: {\n    marginTop: \"8px\",\n  },\n});\n\nconst TABLE_DATA = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n];\n\nexport const GameGrid: React.FC<GameGridProps> = ({ game }) => {\n  const cellClass = (value: number): string | undefined => {\n    if (value === game.current) {\n      return classes(styles.tableCell, styles.tableCellSelected);\n    }\n    return styles.tableCell;\n  };\n\n  const probabilityString = (val: number): string => {\n    const pVector = game.probabilityMatrix[game.current];\n    const fixedDecimals = 3;\n    return `P=${pVector[val].toFixed(fixedDecimals)}`;\n  };\n\n  return (\n    <table>\n      {TABLE_DATA.map((row, idx) => (\n        <tr key={idx}>\n          {row.map((val) => (\n            <td className={cellClass(val)} key={val}>\n              <div className={styles.tableCellContent}>\n                <div className={styles.tableCellContentValue}>{val}</div>\n                <code className={styles.tableCellContentProbability}>{probabilityString(val)}</code>\n              </div>\n            </td>\n          ))}\n        </tr>\n      ))}\n    </table>\n  );\n};\n","import React from \"react\";\n\nexport const Header: React.FC = () => (\n  <h1>\n    <a href=\"https://github.com/vapurrmaid/markov-chain\" rel=\"noopener noreferrer\" target=\"_blank\">\n      @vapurrmaid/markov-chain\n    </a>{\" \"}\n    Example\n  </h1>\n);\n","import React from \"react\";\nimport { stylesheet } from \"typestyle\";\n\nconst styles = stylesheet({\n  root: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n});\n\nexport const Layout: React.FC = ({ children }) => <div className={styles.root}>{children}</div>;\n","import { MarkovChain } from \"@vapurrmaid/markov-chain\";\n\nconst GAME_VALUES = [0, 1, 2, 3, 4, 5, 6, 7, 8] as const;\nexport type GameValues = typeof GAME_VALUES[number];\n\nconst p0 = 0;\nconst p3 = 1 / 3;\nconst p5 = 1 / 5;\nconst p8 = 1 / 8;\n\nconst GAME_PROBABILITIES = [\n  [p0, p3, p0, p3, p3, p0, p0, p0, p0], // 0\n  [p5, p0, p5, p5, p5, p5, p0, p0, p0], // 1\n  [p0, p3, p0, p0, p3, p3, p0, p0, p0], // 2\n\n  [p5, p5, p0, p0, p5, p0, p5, p5, p0], // 3\n  [p8, p8, p8, p8, p0, p8, p8, p8, p8], // 4\n  [p0, p5, p5, p0, p5, p0, p0, p5, p5], // 5\n\n  [p0, p0, p0, p3, p3, p0, p0, p3, p0], // 6\n  [p0, p0, p0, p5, p5, p5, p5, p0, p5], // 7\n  [p0, p0, p0, p0, p3, p3, p0, p3, p0], // 8\n];\n\nexport const Game = new MarkovChain(Array.from(GAME_VALUES), GAME_PROBABILITIES);\n","import React, { useEffect, useState } from \"react\";\nimport { GameGrid } from \"./components/GameGrid\";\nimport { Header } from \"./components/Header\";\nimport { Layout } from \"./components/Layout\";\nimport { Game, GameValues } from \"./entities/game\";\n\nexport const App: React.FC = () => {\n  const [, setSelectedValue] = useState<GameValues>(Game.current);\n\n  useEffect(() => {\n    const updateGameValue = () => setSelectedValue(Game.next());\n    const interval = window.setInterval(updateGameValue, 2000);\n    return () => window.clearInterval(interval);\n  }, []);\n\n  return (\n    <Layout>\n      <Header />\n      <GameGrid game={Game} />\n    </Layout>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}